## 1. Análise da Previsão de Demanda Produção Gás Natural na Bahia 2000 a 2022 

# 1.1. Lista de pacotes necessários
# Verifica e instala os pacotes necessários para a análise
pacotes <- c("forecast", "ggplot2", "readxl", "dplyr", "tidyr", "lubridate", "neuralnet", "tidyverse")

# 1.2. Verificando se cada pacote está instalado e, se não estiver, instalando-o
for (pacote in pacotes) {
  if (!requireNamespace(pacote, quietly = TRUE)) {
    install.packages(pacote)
  }
}

# 1.3. Carregando as bibliotecas necessárias
# Carrega os pacotes necessários para a execução do código
lapply(pacotes, library, character.only = TRUE)


#=======================================================================================================================


# 2. Leitura e Preparação dos Dados

# 2.1. Lendo os dados da planilha Excel e criando um dataframe
# Lê os dados do Excel e organiza em um formato mais adequado para a análise
dados <- read_xlsx("C:/Users/emanu/OneDrive/Área de Trabalho/trabalho TCC/ESTUDOS_R/Historico_Prod_ Gas_Bahia/versao final TCC/producao_gas_natural_m3.xlsx")

# 2.2. Transformando os dados usando pivot_longer para derreter as colunas de anos
# Reorganiza os dados para que cada linha represente um mês de um determinado ano
dados_long <- dados %>%
  pivot_longer(cols = -Mes, names_to = "Ano", values_to = "Producao") %>%
  mutate(MesAno = paste(Mes, Ano, sep = "-"))

# 2.3. Criando a coluna MesAno como uma combinação de mês e ano
# Converte a coluna 'MesAno' em um formato de data
dados_long <- dados_long %>%
  mutate(MesAno = as.Date(paste0(Ano, "-", Mes, "-01"), format = "%Y-%b-%d"))

# 2.4. Remover linhas com valores ausentes
# Remove dados que estejam incompletos para evitar erros na análise
dados_long <- na.omit(dados_long)

# 2.5. Filtrar valores dentro do intervalo esperado
# Filtra os dados para garantir que apenas valores não negativos sejam considerados
dados_long <- dados_long %>% filter(Producao >= 0)

# 2.6. Criando a Série Temporal
# Cria a série temporal para a análise utilizando o pacote 'ts'
Serie_Temporal_Mensal <- ts(dados_long$Producao, start = c(2000, 1), frequency = 12)


#=======================================================================================================================


# 3. Análise Exploratória

# 3.1. Criando um gráfico de linha da série temporal
# Visualiza a série temporal para entender o comportamento ao longo do tempo
ggplot(dados_long, aes(x = MesAno, y = Producao)) + 
  geom_line() + 
  labs(title = "Histórico da Produção Mensal de Gás Natural na Bahia", y = "Produção (10³ m³)", x = "MesAno") + theme_minimal()


#=======================================================================================================================


# 4. Análise de Sazonalidade e Padrões

# 4.1. Realizando a decomposição da série temporal e plotando o resultado
# Decompõe a série em componentes de tendência, sazonalidade e resíduos
decomp <- decompose(Serie_Temporal_Mensal)
autoplot(decomp)


#=======================================================================================================================


# 5. Aplicando Médias Móveis

# 5.1. Reordenando os dados pelo MesAno
# Organiza os dados para aplicar a média móvel
dados_long <- dados_long %>% arrange(MesAno)

# 5.2. Calculando médias móveis com janelas de tamanho 3
# Suaviza a série temporal para identificar melhor as tendências
dados_MediaMovel <- ma(dados_long$Producao, order = 3, centre = TRUE)

# 5.3. Criando um novo conjunto de dados com MesAno e Médias Móveis
# Cria um novo dataframe para armazenar as médias móveis
dados_medias_movel <- data.frame(MesAno = dados_long$MesAno, MediaMovel = dados_MediaMovel)

# 5.4. Remover linhas com valores ausentes no conjunto de médias móveis
# Remove valores ausentes das médias móveis para garantir a consistência dos dados
dados_medias_movel <- na.omit(dados_medias_movel)

# 5.5. Plotando gráfico com a série original e médias móveis
# Compara a série original com a série suavizada pelas médias móveis
ggplot() + 
  geom_line(data = dados_long, aes(x = MesAno, y = Producao, color = "Produção Mensal"), alpha = 0.5) + 
  geom_line(data = dados_medias_movel, aes(x = MesAno, y = MediaMovel, color = "Médias Móveis"), linewidth = 1) + 
  scale_color_manual("", 
                     breaks = c("Produção Mensal", "Médias Móveis"),
                     values = c("Produção Mensal" = "blue", "Médias Móveis" = "red")) +
  labs(title = "Produção Mensal com Médias Móveis", 
       y = "Produção (10³ m³)", 
       x = "MesAno") +
  theme_minimal()


#=======================================================================================================================


# 6. Modelagem com ARIMA

# 6.1. Identificando automaticamente o melhor modelo ARIMA
# Ajusta o modelo ARIMA e escolhe automaticamente os melhores parâmetros
modelo_arima_mensal <- auto.arima(dados_long$Producao, trace = TRUE, approximation = FALSE)

# 6.2. Implementar o ARIMA com os parâmetros encontrados
# Implementa o modelo ARIMA utilizando os parâmetros identificados
mod <- Arima(dados_long$Producao, order = c(2, 1, 1))

# 6.3. Checar a qualidade do modelo
# Realiza diagnóstico dos resíduos do modelo para garantir sua adequação
checkresiduals(mod)

# 6.4. Fazer as previsões
# Gerando previsões usando o modelo ARIMA para os próximos 12 meses
prev <- forecast(mod, h = 12)

# 6.5. Extraindo as datas das previsões
# Cria uma sequência de datas para associar às previsões
data_previsao <- seq.Date(from = max(dados_long$MesAno) + months(1), by = "month", length.out = 12)

# 6.6. Criando um dataframe para combinar datas e previsões
# Combina as datas com os valores previstos pelo modelo ARIMA
prev_data <- data.frame(MesAno = data_previsao, Previsao = prev$mean)


# 6.7. Plotando o gráfico com ggplot2
# Visualiza a série original e as previsões geradas pelo modelo ARIMA
ggplot() + 
  geom_line(data = dados_long, aes(x = MesAno, y = Producao), color = "blue") + 
  geom_line(data = prev_data, aes(x = MesAno, y = Previsao), color = "red") + 
  geom_ribbon(data = prev_data, aes(x = MesAno, ymin = prev$lower[,2], ymax = prev$upper[,2]), fill = "red", alpha = 0.2) +
  labs(title = "Previsões do Modelo ARIMA(2,1,1)", 
       y = "Produção (10³ m³)", 
       x = "MesAno") +
  theme_minimal()

# 7. Métricas de Erro para o Modelo ARIMA

# 7.1. Previsões ajustadas para o período histórico
# Usamos a função 'fitted()' para obter as previsões ajustadas (fitted values) do modelo ARIMA,
# que representam as previsões do modelo para o período em que temos dados observados.
ajuste_arima <- fitted(modelo_arima_mensal)

# 7.2. Calculando o erro absoluto
# O erro absoluto é a diferença absoluta entre os valores observados e os valores previstos pelo modelo.
# Ele fornece uma medida direta de quão distante as previsões do modelo estão dos valores reais.
erro_absoluto_arima <- abs(dados_long$Producao - ajuste_arima)
dados_long_erro <- dados_long %>% mutate(erro_absoluto_arima = erro_absoluto_arima)
MAE_arima <- mean(abs(dados_long$Producao - ajuste_arima))
print(paste("MAE do ARIMA: ", MAE_arima))


# 7.3. Calculando o erro quadrático
# O erro quadrático é o quadrado da diferença entre os valores observados e os valores previstos pelo modelo.
# Esta métrica penaliza desvios maiores, proporcionando uma visão clara dos períodos de maior dificuldade na previsão.
erro_quadratico_arima <- (dados_long$Producao - ajuste_arima)^2
dados_long_erro <- dados_long_erro %>% mutate(erro_quadratico_arima = erro_quadratico_arima)
MSE_arima <- mean((dados_long$Producao - ajuste_arima)^2)
print(paste("MSE do ARIMA: ", MSE_arima))

# 7.3.1. Garantir que 'MesAno' esteja no formato 'Date'
# Caso esteja no formato 'ts', podemos precisar convertê-lo explicitamente
dados_long_erro$MesAno <- as.Date(dados_long_erro$MesAno)

# 7.3.2. Certifique-se de que as colunas de erro estejam no formato numérico
dados_long_erro$erro_absoluto_arima <- as.numeric(dados_long_erro$erro_absoluto_arima)
dados_long_erro$erro_quadratico_arima <- as.numeric(dados_long_erro$erro_quadratico_arima)



# 7.4. Plotando o gráfico de erro absoluto para ARIMA
# Este gráfico visualiza a variação do erro absoluto ao longo do tempo, permitindo identificar os períodos
# em que o modelo ARIMA teve maior dificuldade em prever com precisão.
ggplot(data = dados_long_erro, aes(x = MesAno, y = erro_absoluto_arima)) + 
  geom_line() + 
  labs(title = "Erro Absoluto do Modelo ARIMA", 
       y = "Erro Absoluto", 
       x = "MesAno") +
  theme_minimal()

# 7.5. Plotando o gráfico de erro quadrático para ARIMA
# Este gráfico visualiza o erro quadrático ao longo do tempo, destacando os períodos em que o modelo
# ARIMA teve maior dificuldade em capturar as variações da série temporal.
ggplot(data = dados_long_erro, aes(x = MesAno, y = erro_quadratico_arima)) + 
  geom_line() + 
  labs(title = "Erro Quadrático do Modelo ARIMA", 
       y = "Erro Quadrático", 
       x = "MesAno") +
  theme_minimal()



#=======================================================================================================================


# 8. Modelagem com ETS (Exponential Smoothing State Space Model)

# 8.1. Modela a série temporal utilizando o modelo ETS
modelo_ets <- ets(dados_long$Producao)

# 8.2. Fazendo previsões usando o modelo ETS
prev_ets <- forecast(modelo_ets, h = 12)

# 8.3. Extraindo as datas das previsões
# Cria as datas associadas às previsões do modelo ETS
data_previsao_ets <- seq.Date(from = max(dados_long$MesAno) + months(1), by = "month", length.out = 12)

# 8.4. Criando um dataframe para combinar datas e previsões
# Combina as previsões com as datas correspondentes
prev_data_ets <- data.frame(MesAno = data_previsao_ets, Previsao = prev_ets$mean)

# 8.5. Plotando o gráfico com ggplot2
# Visualiza a série original e as previsões geradas pelo modelo ETS
ggplot() + 
  geom_line(data = dados_long, aes(x = MesAno, y = Producao), color = "blue") + 
  geom_line(data = prev_data_ets, aes(x = MesAno, y = Previsao), color = "red") + 
  geom_ribbon(data = prev_data_ets, aes(x = MesAno, ymin = prev_ets$lower[,2], ymax = prev_ets$upper[,2]), fill = "red", alpha = 0.2) +
  labs(title = "Previsões do Modelo ETS", 
       y = "Produção (10³ m³)", 
       x = "MesAno") +
  theme_minimal()

# 9. Métricas de Erro para o Modelo ETS

# 9.1. Previsões ajustadas para o período histórico
# A função 'fitted()' é usada para obter as previsões ajustadas (fitted values) do modelo ETS,
# que correspondem às previsões do modelo para o período em que já temos dados observados.
ajuste_ets <- fitted(modelo_ets)

# 9.2. Calculando o erro absoluto
# O erro absoluto é a diferença absoluta entre os valores observados e os valores previstos pelo modelo.
# Ele nos dá uma ideia de quão distante as previsões do modelo estão dos valores reais.
erro_absoluto_ets <- abs(dados_long$Producao - ajuste_ets)
dados_long_erro <- dados_long %>% mutate(erro_absoluto_ets = erro_absoluto_ets)
MAE_ets <- mean(abs(dados_long$Producao - ajuste_ets))
print(paste0("MAE do ETS:", MAE_ets))

# 9.3. Calculando o erro quadrático
# O erro quadrático é o quadrado da diferença entre os valores observados e os valores previstos pelo modelo.
# Essa métrica penaliza desvios maiores, ou seja, valores em que a previsão está muito distante do valor real.
erro_quadratico_ets <- (dados_long$Producao - ajuste_ets)^2
dados_long_erro <- dados_long_erro %>% mutate(erro_quadratico_ets = erro_quadratico_ets)
MSE_ets <- mean((dados_long$Producao - ajuste_ets)^2)
print(paste0("MSE do ETS:", MSE_ets))


# 9.3.1 Garantir que 'MesAno' esteja no formato 'Date'
# Caso esteja no formato 'ts', podemos precisar convertê-lo explicitamente
dados_long_erro$MesAno <- as.Date(dados_long_erro$MesAno)

# Certifique-se de que as colunas de erro estejam no formato numérico
dados_long_erro$erro_absoluto_ets <- as.numeric(dados_long_erro$erro_absoluto_ets)
dados_long_erro$erro_quadratico_ets <- as.numeric(dados_long_erro$erro_quadratico_ets)



# 9.4. Plotando o gráfico de erro absoluto para ETS
# Este gráfico mostra como o erro absoluto varia ao longo do tempo, permitindo identificar períodos 
# onde o modelo teve maior dificuldade em prever com precisão.
ggplot(data = dados_long_erro, aes(x = MesAno, y = erro_absoluto_ets)) + 
  geom_line() + 
  labs(title = "Erro Absoluto do Modelo ETS", 
       y = "Erro Absoluto", 
       x = "MesAno") +
  theme_minimal()

# 9.5. Plotando o gráfico de erro quadrático para ETS
# Este gráfico visualiza o erro quadrático ao longo do tempo, destacando períodos com grandes desvios
# entre as previsões e os valores reais, o que pode indicar a presença de outliers ou mudanças bruscas nos dados.
ggplot(data = dados_long_erro, aes(x = MesAno, y = erro_quadratico_ets)) + 
  geom_line() + 
  labs(title = "Erro Quadrático do Modelo ETS", 
       y = "Erro Quadrático", 
       x = "MesAno") +
  theme_minimal()


#=======================================================================================================================

# 10.Comparação entre Modelos ARIMA e ETS

# 10.1. Sobreposição dos Erros Absolutos dos Modelos ARIMA e ETS
ggplot(data = dados_long_erro) + 
  geom_line(aes(x = MesAno, y = erro_absoluto_arima, color = "Erro Absoluto ARIMA")) + 
  geom_line(aes(x = MesAno, y = erro_absoluto_ets, color = "Erro Absoluto ETS")) + 
  labs(title = "Comparação do Erro Absoluto - ARIMA vs ETS", y = "Erro Absoluto", x = "MesAno") + 
  scale_color_manual("", breaks = c("Erro Absoluto ARIMA", "Erro Absoluto ETS"), 
                     values = c("Erro Absoluto ARIMA" = "blue", "Erro Absoluto ETS" = "red")) +
  theme_minimal()

# 10.2. Sobreposição dos Erros Quadráticos dos Modelos ARIMA e ETS
ggplot(data = dados_long_erro) + 
  geom_line(aes(x = MesAno, y = erro_quadratico_arima, color = "Erro Quadrático ARIMA")) + 
  geom_line(aes(x = MesAno, y = erro_quadratico_ets, color = "Erro Quadrático ETS")) + 
  labs(title = "Comparação do Erro Quadrático - ARIMA vs ETS", y = "Erro Quadrático", x = "MesAno") + 
  scale_color_manual("", breaks = c("Erro Quadrático ARIMA", "Erro Quadrático ETS"), 
                     values = c("Erro Quadrático ARIMA" = "blue", "Erro Quadrático ETS" = "red")) +
  theme_minimal()








