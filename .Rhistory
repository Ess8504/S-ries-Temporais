## Produção Mensal de Gás na Bahia 2000 a 2022

# Lista de pacotes necessários
pacotes <- c("forecast", "ggplot2", "readxl", "dplyr", "tidyr", "lubridate", "neuralnet", "tidyverse")

# Verificando se cada pacote está instalado e, se não estiver, instalando-o
for (pacote in pacotes) {
  if (!requireNamespace(pacote, quietly = TRUE)) {
    install.packages(pacote)
  }
}

# Carregando as bibliotecas necessárias
lapply(pacotes, library, character.only = TRUE)

# Lendo os dados da planilha Excel e criando um dataframe
dados <- read_xlsx("C:/Users/emanu/OneDrive/Área de Trabalho/trabalho TCC/ESTUDOS_R/Historico_Prod_ Gas_Bahia/producao_gas_natural_m3.xlsx")

# Transformando os dados usando pivot_longer para derreter as colunas de anos
dados_long <- dados %>%
  pivot_longer(cols = -Mes, names_to = "Ano", values_to = "Producao") %>%
  mutate(MesAno = paste(Mes, Ano, sep = "-"))

# Criando a coluna MesAno como uma combinação de mês e ano
dados_long <- dados_long %>%
  mutate(MesAno = as.Date(paste0(Ano, "-", Mes, "-01"), format = "%Y-%b-%d"))

# Remover linhas com valores ausentes
dados_long <- na.omit(dados_long)

# Filtrar valores dentro do intervalo esperado
dados_long <- dados_long %>% filter(Producao >= 0)

# Criando a Série Temporal usando o pacote 'ts'
Serie_Temporal_Mensal <- ts(dados_long$Producao, start = c(2000, 1), frequency = 12)

# 1 - Análise exploratória
# Criando um gráfico de linha da série temporal
ggplot(dados_long, aes(x = MesAno, y = Producao)) + 
  geom_line() + 
  labs(title = "Histórico da Produção Mensal de Gás Natural na Bahia", y = "Produção (10³ m³)", x = "MesAno")

# 2 - Análise de Sazonalidade e Padrões
# Realizando a decomposição da série temporal e plotando o resultado
decomp <- decompose(Serie_Temporal_Mensal)
autoplot(decomp)

# 3 - Aplicando médias móveis
# Reordenando os dados pelo MesAno
dados_long <- dados_long %>% 
  arrange(MesAno) 

# Calculando médias móveis com janelas de tamanho 3
dados_MediaMovel <- ma(dados_long$Producao, order = 3, centre = TRUE)

# Criando um novo conjunto de dados com MesAno e Médias Móveis
dados_medias_movel <- data.frame(MesAno = dados_long$MesAno, MediaMovel = dados_MediaMovel)

# Remover linhas com valores ausentes no conjunto de médias móveis
dados_medias_movel <- na.omit(dados_medias_movel)

# Plotando gráfico com a série original e médias móveis
ggplot() + 
  geom_line(data = dados_long, aes(x = MesAno, y = Producao, color = "Produção Mensal"), alpha = 0.5) + 
  geom_line(data = dados_medias_movel, aes(x = MesAno, y = MediaMovel, color = "Médias Móveis"), linewidth = 1) + 
  scale_color_manual("", 
                     breaks = c("Produção Mensal", "Médias Móveis"),
                     values = c("Produção Mensal" = "blue", "Médias Móveis" = "red")) +
  labs(title = "Produção Mensal com Médias Móveis", 
       y = "Produção (10³ m³)", 
       x = "MesAno") +
  theme_minimal()

# 4 - Modelagem com ARIMA
# Identificando automaticamente o melhor modelo ARIMA
modelo_arima_mensal <- auto.arima(dados_long$Producao, trace = TRUE, approximation = FALSE)

# 4.1 - Implementar o ARIMA com os parâmetros encontrados
mod <- Arima(dados_long$Producao, order = c(2, 1, 1))

# 4.2 - Checar a qualidade do modelo
checkresiduals(mod)

# 4.3 - Fazer as previsões
# Gerando previsões usando o modelo ARIMA
prev <- forecast(mod, h = 12)

# Extraindo as datas das previsões
data_previsao <- seq.Date(from = max(dados_long$MesAno) + months(1), by = "month", length.out = 12)

# Criando um dataframe para combinar datas e previsões
prev_data <- data.frame(MesAno = data_previsao, Previsao = prev$mean)

# Plotando o gráfico com ggplot2
ggplot() + 
  geom_line(data = dados_long, aes(x = MesAno, y = Producao), color = "blue") + 
  geom_line(data = prev_data, aes(x = MesAno, y = Previsao), color = "red") + 
  geom_ribbon(data = prev_data, aes(x = MesAno, ymin = prev$lower[,2], ymax = prev$upper[,2]), fill = "red", alpha = 0.2) +
  labs(title = "Previsões do Modelo ARIMA(2,1,1)", 
       y = "Produção (10³ m³)", 
       x = "MesAno") +
  theme_minimal()

# 5 - Métricas de erro: Erro Absoluto e Gráficos
erro_absoluto <- abs(dados_long$Producao - as.numeric(modelo_arima_mensal$fitted))
dados_long_erro <- dados_long %>% mutate(erro_absoluto = erro_absoluto)

# Plotando o gráfico de erro absoluto
ggplot(data = dados_long_erro, aes(x = MesAno, y = erro_absoluto)) + 
  geom_line() + 
  labs(title = "Erro Absoluto do Modelo ARIMA", 
       y = "Erro Absoluto", 
       x = "MesAno") +
  theme_minimal()

# 6 - Métricas de erro: Erro Quadrático e Gráficos
erro_quadratico <- (dados_long$Producao - as.numeric(modelo_arima_mensal$fitted))^2
dados_long_erro <- dados_long_erro %>% mutate(erro_quadratico = erro_quadratico)

# Plotando o gráfico de erro quadrático
ggplot(data = dados_long_erro, aes(x = MesAno, y = erro_quadratico)) + 
  geom_line() + 
  labs(title = "Erro Quadrático do Modelo ARIMA", 
       y = "Erro Quadrático", 
       x = "MesAno") +
  theme_minimal()

# Sobreposição dos Erros Absoluto e Quadrático
# Normalizando os erros para que fiquem na mesma escala
dados_long_erro <- dados_long_erro %>%
  mutate(erro_absoluto_norm = erro_absoluto / max(erro_absoluto, na.rm = TRUE),
         erro_quadratico_norm = erro_quadratico / max(erro_quadratico, na.rm = TRUE))

# Criando o gráfico de sobreposição
ggplot(data = dados_long_erro) + 
  geom_line(aes(x = MesAno, y = erro_absoluto_norm, color = "Erro Absoluto Normalizado")) + 
  geom_line(aes(x = MesAno, y = erro_quadratico_norm, color = "Erro Quadrático Normalizado")) + 
  labs(title = "Sobreposição dos Erros Absoluto e Quadrático do Modelo ARIMA", 
       y = "Erro Normalizado", 
       x = "MesAno") + 
  scale_color_manual("", 
                     breaks = c("Erro Absoluto Normalizado", "Erro Quadrático Normalizado"),
                     values = c("Erro Absoluto Normalizado" = "blue", "Erro Quadrático Normalizado" = "red")) +
  theme_minimal()

# 7 - Modelagem com ETS (Exponential Smoothing State Space Model)
modelo_ets <- ets(dados_long$Producao)
prev_ets <- forecast(modelo_ets, h = 12)

# Extraindo as datas das previsões
data_previsao_ets <- seq.Date(from = max(dados_long$MesAno) + months(1), by = "month", length.out = 12)

# Criando um dataframe para combinar datas e previsões
prev_data_ets <- data.frame(MesAno = data_previsao_ets, Previsao = prev_ets$mean)

# Plotando o gráfico com ggplot2
ggplot() + 
  geom_line(data = dados_long, aes(x = MesAno, y = Producao), color = "blue") + 
  geom_line(data = prev_data_ets, aes(x = MesAno, y = Previsao), color = "red") + 
  geom_ribbon(data = prev_data_ets, aes(x = MesAno, ymin = prev_ets$lower[,2], ymax = prev_ets$upper[,2]), fill = "red", alpha = 0.2) +
  labs(title = "Previsões do Modelo ETS", 
       y = "Produção (10³ m³)", 
       x = "MesAno") +
  theme_minimal()
       
# 8 - Modelagem com Regressão Linear
# Modelando a série temporal usando regressão linear
modelo_reg <- lm(Producao ~ MesAno, data = dados_long)
       
# Criando um novo conjunto de dados para previsões
novos_dados <- data.frame(MesAno = seq.Date(max(dados_long$MesAno) + 1, by = "months", length.out = 12))
       
# Fazendo previsões usando o modelo de regressão linear
prev_reg <- predict(modelo_reg, newdata = novos_dados)
       
# Criando um dataframe para combinar datas e previsões
prev_data_reg <- data.frame(MesAno = novos_dados$MesAno, Previsao = prev_reg)
       
# Plotando o gráfico com ggplot2
ggplot() + 
geom_line(data = dados_long, aes(x = MesAno, y = Producao), color = "blue") + 
geom_line(data = prev_data_reg, aes(x = MesAno, y = Previsao), color = "red") + 
labs(title = "Previsões do Modelo de Regressão Linear", 
              y = "Produção (10³ m³)", 
              x = "MesAno") +
         theme_minimal()

       
